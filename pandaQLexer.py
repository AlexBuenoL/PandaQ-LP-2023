# Generated from pandaQ.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,5,23,149,8,23,10,23,12,23,
        152,9,23,1,24,4,24,155,8,24,11,24,12,24,156,1,25,4,25,160,8,25,11,
        25,12,25,161,1,25,1,25,4,25,166,8,25,11,25,12,25,167,1,26,4,26,171,
        8,26,11,26,12,26,172,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,4,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,
        10,13,13,32,32,180,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,
        0,5,60,1,0,0,0,7,65,1,0,0,0,9,72,1,0,0,0,11,77,1,0,0,0,13,79,1,0,
        0,0,15,81,1,0,0,0,17,86,1,0,0,0,19,97,1,0,0,0,21,100,1,0,0,0,23,
        102,1,0,0,0,25,104,1,0,0,0,27,106,1,0,0,0,29,108,1,0,0,0,31,110,
        1,0,0,0,33,112,1,0,0,0,35,121,1,0,0,0,37,125,1,0,0,0,39,130,1,0,
        0,0,41,136,1,0,0,0,43,140,1,0,0,0,45,144,1,0,0,0,47,146,1,0,0,0,
        49,154,1,0,0,0,51,159,1,0,0,0,53,170,1,0,0,0,55,56,5,59,0,0,56,2,
        1,0,0,0,57,58,5,58,0,0,58,59,5,61,0,0,59,4,1,0,0,0,60,61,5,112,0,
        0,61,62,5,108,0,0,62,63,5,111,0,0,63,64,5,116,0,0,64,6,1,0,0,0,65,
        66,5,115,0,0,66,67,5,101,0,0,67,68,5,108,0,0,68,69,5,101,0,0,69,
        70,5,99,0,0,70,71,5,116,0,0,71,8,1,0,0,0,72,73,5,102,0,0,73,74,5,
        114,0,0,74,75,5,111,0,0,75,76,5,109,0,0,76,10,1,0,0,0,77,78,5,42,
        0,0,78,12,1,0,0,0,79,80,5,44,0,0,80,14,1,0,0,0,81,82,5,32,0,0,82,
        83,5,97,0,0,83,84,5,115,0,0,84,85,5,32,0,0,85,16,1,0,0,0,86,87,5,
        105,0,0,87,88,5,110,0,0,88,89,5,110,0,0,89,90,5,101,0,0,90,91,5,
        114,0,0,91,92,5,32,0,0,92,93,5,106,0,0,93,94,5,111,0,0,94,95,5,105,
        0,0,95,96,5,110,0,0,96,18,1,0,0,0,97,98,5,111,0,0,98,99,5,110,0,
        0,99,20,1,0,0,0,100,101,5,61,0,0,101,22,1,0,0,0,102,103,5,47,0,0,
        103,24,1,0,0,0,104,105,5,43,0,0,105,26,1,0,0,0,106,107,5,45,0,0,
        107,28,1,0,0,0,108,109,5,40,0,0,109,30,1,0,0,0,110,111,5,41,0,0,
        111,32,1,0,0,0,112,113,5,111,0,0,113,114,5,114,0,0,114,115,5,100,
        0,0,115,116,5,101,0,0,116,117,5,114,0,0,117,118,5,32,0,0,118,119,
        5,98,0,0,119,120,5,121,0,0,120,34,1,0,0,0,121,122,5,97,0,0,122,123,
        5,115,0,0,123,124,5,99,0,0,124,36,1,0,0,0,125,126,5,100,0,0,126,
        127,5,101,0,0,127,128,5,115,0,0,128,129,5,99,0,0,129,38,1,0,0,0,
        130,131,5,119,0,0,131,132,5,104,0,0,132,133,5,101,0,0,133,134,5,
        114,0,0,134,135,5,101,0,0,135,40,1,0,0,0,136,137,5,97,0,0,137,138,
        5,110,0,0,138,139,5,100,0,0,139,42,1,0,0,0,140,141,5,110,0,0,141,
        142,5,111,0,0,142,143,5,116,0,0,143,44,1,0,0,0,144,145,5,60,0,0,
        145,46,1,0,0,0,146,150,7,0,0,0,147,149,7,1,0,0,148,147,1,0,0,0,149,
        152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,48,1,0,0,0,152,150,
        1,0,0,0,153,155,7,2,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,
        1,0,0,0,156,157,1,0,0,0,157,50,1,0,0,0,158,160,7,2,0,0,159,158,1,
        0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,
        0,0,0,163,165,5,46,0,0,164,166,7,2,0,0,165,164,1,0,0,0,166,167,1,
        0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,52,1,0,0,0,169,171,7,3,
        0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,0,
        0,0,173,174,1,0,0,0,174,175,6,26,0,0,175,54,1,0,0,0,6,0,150,156,
        161,167,172,1,6,0,0
    ]

class pandaQLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    ID = 24
    NUM = 25
    DECIMAL = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "':='", "'plot'", "'select'", "'from'", "'*'", "','", 
            "' as '", "'inner join'", "'on'", "'='", "'/'", "'+'", "'-'", 
            "'('", "')'", "'order by'", "'asc'", "'desc'", "'where'", "'and'", 
            "'not'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "DECIMAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "ID", "NUM", "DECIMAL", "WS" ]

    grammarFileName = "pandaQ.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


