# Generated from pandaQ.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,5,19,119,8,19,10,19,12,19,122,9,
        19,1,20,4,20,125,8,20,11,20,12,20,126,1,21,4,21,130,8,21,11,21,12,
        21,131,1,21,1,21,4,21,136,8,21,11,21,12,21,137,1,22,4,22,141,8,22,
        11,22,12,22,142,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,150,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,54,1,0,0,0,5,59,1,0,0,0,7,
        61,1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,70,1,0,0,0,15,72,1,0,0,
        0,17,74,1,0,0,0,19,76,1,0,0,0,21,78,1,0,0,0,23,80,1,0,0,0,25,89,
        1,0,0,0,27,93,1,0,0,0,29,98,1,0,0,0,31,104,1,0,0,0,33,108,1,0,0,
        0,35,112,1,0,0,0,37,114,1,0,0,0,39,116,1,0,0,0,41,124,1,0,0,0,43,
        129,1,0,0,0,45,140,1,0,0,0,47,48,5,115,0,0,48,49,5,101,0,0,49,50,
        5,108,0,0,50,51,5,101,0,0,51,52,5,99,0,0,52,53,5,116,0,0,53,2,1,
        0,0,0,54,55,5,102,0,0,55,56,5,114,0,0,56,57,5,111,0,0,57,58,5,109,
        0,0,58,4,1,0,0,0,59,60,5,59,0,0,60,6,1,0,0,0,61,62,5,42,0,0,62,8,
        1,0,0,0,63,64,5,44,0,0,64,10,1,0,0,0,65,66,5,32,0,0,66,67,5,97,0,
        0,67,68,5,115,0,0,68,69,5,32,0,0,69,12,1,0,0,0,70,71,5,47,0,0,71,
        14,1,0,0,0,72,73,5,43,0,0,73,16,1,0,0,0,74,75,5,45,0,0,75,18,1,0,
        0,0,76,77,5,40,0,0,77,20,1,0,0,0,78,79,5,41,0,0,79,22,1,0,0,0,80,
        81,5,111,0,0,81,82,5,114,0,0,82,83,5,100,0,0,83,84,5,101,0,0,84,
        85,5,114,0,0,85,86,5,32,0,0,86,87,5,98,0,0,87,88,5,121,0,0,88,24,
        1,0,0,0,89,90,5,97,0,0,90,91,5,115,0,0,91,92,5,99,0,0,92,26,1,0,
        0,0,93,94,5,100,0,0,94,95,5,101,0,0,95,96,5,115,0,0,96,97,5,99,0,
        0,97,28,1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,101,5,101,0,
        0,101,102,5,114,0,0,102,103,5,101,0,0,103,30,1,0,0,0,104,105,5,97,
        0,0,105,106,5,110,0,0,106,107,5,100,0,0,107,32,1,0,0,0,108,109,5,
        110,0,0,109,110,5,111,0,0,110,111,5,116,0,0,111,34,1,0,0,0,112,113,
        5,60,0,0,113,36,1,0,0,0,114,115,5,61,0,0,115,38,1,0,0,0,116,120,
        7,0,0,0,117,119,7,1,0,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,
        1,0,0,0,120,121,1,0,0,0,121,40,1,0,0,0,122,120,1,0,0,0,123,125,7,
        2,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,
        0,0,0,127,42,1,0,0,0,128,130,7,2,0,0,129,128,1,0,0,0,130,131,1,0,
        0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,135,5,46,
        0,0,134,136,7,2,0,0,135,134,1,0,0,0,136,137,1,0,0,0,137,135,1,0,
        0,0,137,138,1,0,0,0,138,44,1,0,0,0,139,141,7,3,0,0,140,139,1,0,0,
        0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,
        0,144,145,6,22,0,0,145,46,1,0,0,0,6,0,120,126,131,137,142,1,6,0,
        0
    ]

class pandaQLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    ID = 20
    NUM = 21
    DECIMAL = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'select'", "'from'", "';'", "'*'", "','", "' as '", "'/'", 
            "'+'", "'-'", "'('", "')'", "'order by'", "'asc'", "'desc'", 
            "'where'", "'and'", "'not'", "'<'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "DECIMAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "ID", "NUM", 
                  "DECIMAL", "WS" ]

    grammarFileName = "pandaQ.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


